/*
 * Copyright (c) 2015. Greg Cantrell, All rights reserved.
 */

package com.examples.gregcantrell.textchordgraph.ChordGraph;

import android.graphics.Color;

import java.util.ArrayList;

/**
 * Created by gcantrell on 9/1/2015.
 *
 * This class manages a color palette. The palette is generated by selecting colors along a gradient
 * from color1 to color2 at intervals determined by the numColors parameter. There are two accessor
 * methods: one to get a random color from the palette and one to get a color at an index.
 *
 */
public class ColorPalette {

    // List to save the generated colors from the gradient colors
    private ArrayList<Integer> colors;

    /**
     * Constructor takes in a start and end color gradient and generates a color palette of numcolors
     * and saves it for later use
     * @param color1 the start color of the gradient
     * @param color2 the end color of th gradient
     * @param numColors the number of colors to generate from the gradient
     */
    public ColorPalette(int color1, int color2, int numColors) {

        colors = new ArrayList<Integer>();

        // gather the color values needed
        int red1 = Color.red(color1);
        int green1 = Color.green(color1);
        int blue1 = Color.blue(color1);

        int red2 = Color.red(color2);
        int green2 = Color.green(color2);
        int blue2 = Color.blue(color2);

        // calculate the offset for each color channel
        int redOffset = (red1 == red2) ? 0 : Math.round(((float) red2 - (float) red1) / (float) numColors);
        int greenOffset = (green1 == green2) ? 0 : Math.round(((float) green2 - (float) green1) / (float) numColors);
        int blueOffset = (blue1 == blue2) ? 0 : Math.round(((float) blue2 - (float) blue1) / (float) numColors);

        // add the first color
        colors.add(Color.rgb(red1, green1, blue1));

        // generate the incremental colors
        for (int i = 1; i < numColors - 1; i++) {
            colors.add(Color.rgb(red1 + redOffset * i, green1 + greenOffset * i, blue1 + blueOffset * i));
        }

        // add the last color
        colors.add(Color.rgb(red2, green2, blue2));
    }

    /**
     * returns the color at the given index in the color pallete
     * @param index the index of the color to get
     * @return returns the color at index from the color palette
     */
    public final int getColor(int index) {
        return colors.get(index);
    }

    /**
     * returns a random color form the color palette
     * @return random color form the color palette
     */
    public final int getColor() {
        return colors.get((int)Math.round(Math.random()*(double)(colors.size()-1)));
    }
}
